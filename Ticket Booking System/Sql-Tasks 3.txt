Tasks 3: Aggregate functions, Having, Order By, GroupBy and Joins: 


1. Write a SQL query to List Events and Their Average Ticket Prices. 
select event_id, event_name, avg(ticket_price) as avgticketprice
from event
group by event_id, event_name;

2. Write a SQL query to Calculate the Total Revenue Generated by Events. 
select e.event_id, e.event_name, sum(b.total_cost) as totalrevenue
from event e
join booking b on e.event_id = b.event_id
group by e.event_id, e.event_name;

3. Write a SQL query to find the event with the highest ticket sales. 
select e.event_id, e.event_name, sum(b.num_tickets) as totaltickets
from event e
join booking b on e.event_id = b.event_id
group by e.event_id, e.event_name
order by totaltickets desc
limit 1;

4. Write a SQL query to Calculate the Total Number of Tickets Sold for Each Event. 
select e.event_id, e.event_name, sum(b.num_tickets) as totaltickets
from event e
join booking b on e.event_id = b.event_id
group by e.event_id, e.event_name;

5. Write a SQL query to Find Events with No Ticket Sales. 
select e.event_id, e.event_name
from event e
left join booking b on e.event_id = b.event_id
where b.booking_id is null;

6. Write a SQL query to Find the User Who Has Booked the Most Tickets. 
select c.customer_id, c.customer_name, sum(b.num_tickets) as totaltickets
from customer c
join booking b on c.customer_id = b.customer_id
group by c.customer_id, c.customer_name
order by totaltickets desc
limit 1;

7. Write a SQL query to List Events and the total number of tickets sold for each month.
 select e.event_id, e.event_name, month(b.booking_date) as bookingmonth, sum(b.num_tickets) as totaltickets
from event e
join booking b on e.event_id = b.event_id
group by e.event_id, e.event_name, bookingmonth
order by bookingmonth;

8. Write a SQL query to calculate the average Ticket Price for Events in Each Venue. 
select v.venue_id, v.venue_name, avg(e.ticket_price) as avgticketprice
from venue v
join event e on v.venue_id = e.venue_id
group by v.venue_id, v.venue_name;

9. Write a SQL query to calculate the total Number of Tickets Sold for Each Event Type. 
select e.event_type, sum(b.num_tickets) as totaltickets
from event e
join booking b on e.event_id = b.event_id
group by e.event_type;

10. Write a SQL query to calculate the total Revenue Generated by Events in Each Year. 
select year(e.event_date) as eventyear, sum(b.total_cost) as totalrevenue
from event e
join booking b on e.event_id = b.event_id
group by eventyear;

11. Write a SQL query to list users who have booked tickets for multiple events.
 select c.customer_id, c.customer_name, count(distinct b.event_id) as totalevents
from customer c
join booking b on c.customer_id = b.customer_id
group by c.customer_id, c.customer_name
having totalevents > 1;

12. Write a SQL query to calculate the Total Revenue Generated by Events for Each User. 
select c.customer_id, c.customer_name, sum(b.total_cost) as totalrevenue
from customer c
join booking b on c.customer_id = b.customer_id
group by c.customer_id, c.customer_name;

13. Write a SQL query to calculate the Average Ticket Price for Events in Each Category and Venue. 
select e.event_type, v.venue_name, avg(e.ticket_price) as avgticketprice
from event e
join venue v on e.venue_id = v.venue_id
group by e.event_type, v.venue_name;

14. Write a SQL query to list Users and the Total Number of Tickets They've Purchased in the Last 30 Days.
  select c.customer_id, c.customer_name, sum(b.num_tickets) as totaltickets
from customer c
join booking b on c.customer_id = b.customer_id
where b.booking_date >= date_sub(current_date, interval 30 day)
group by c.customer_id, c.customer_name;
