Tasks 4: Subquery and its types 


1. Calculate the Average Ticket Price for Events in Each Venue Using a Subquery.
select v.venue_id, v.venue_name,
    (select avg(e.ticket_price)
     from event e
     where e.venue_id = v.venue_id) as avgticketprice
from venu v;
 
2. Find Events with More Than 50% of Tickets Sold using subquery. 
select e.event_id, e.event_name, e.total_seats, e.available_seats
from event e
where (e.total_seats - e.available_seats) > (e.total_seats * 0.5);

3. Calculate the Total Number of Tickets Sold for Each Event.
select e.event_id, e.event_name,
    (select ifnull(sum(b.num_tickets), 0)
     from booking b
     where b.event_id = e.event_id) as totalticketssold
from event e;
 
4. Find Users Who Have Not Booked Any Tickets Using a NOT EXISTS Subquery. 
select c.customer_id, c.customer_name
from customer c
where not exists (
    select 1
    from booking b
    where b.customer_id = c.customer_id
);

5. List Events with No Ticket Sales Using a NOT IN Subquery.
 select e.event_id, e.event_name
from event e
where e.event_id not in (
    select distinct b.event_id
    from booking b
);

6. Calculate the Total Number of Tickets Sold for Each Event Type Using a Subquery in the FROM Clause.
 select subquery.event_type, sum(subquery.totaltickets) as totalticketssold
from (
    select e.event_type, ifnull(sum(b.num_tickets), 0) as totaltickets
    from event e
    left join booking b on e.event_id = b.event_id
    group by e.event_id, e.event_type
) as subquery
group by subquery.event_type;


7. Find Events with Ticket Prices Higher Than the Average Ticket Price Using a Subquery in the WHERE Clause.
 select e.event_id, e.event_name, e.ticket_price
from event e
where e.ticket_price > (
    select avg(ticket_price)
    from event
);

8. Calculate the Total Revenue Generated by Events for Each User Using a Correlated Subquery. 
select c.customer_id, c.customer_name,
    (select ifnull(sum(b.total_cost), 0)
     from booking b
     where b.customer_id = c.customer_id) as totalrevenue
from customer c;

9. List Users Who Have Booked Tickets for Events in a Given Venue Using a Subquery in the WHERE 
Clause. 
select c.customer_id, c.customer_name
from customer c
where c.customer_id in (
    select b.customer_id
    from booking b
    join event e on b.event_id = e.event_id
    where e.venue_id = 1 
);

10. Calculate the Total Number of Tickets Sold for Each Event Category Using a Subquery with 
GROUP BY. 
select e.event_type, sum(b.num_tickets) as totalticketssold
from event e
left join booking b on e.event_id = b.event_id
group by e.event_type;

11. Find Users Who Have Booked Tickets for Events in each Month Using a Subquery with 
DATE_FORMAT.
select c.customer_id, c.customer_name, date_format(b.booking_date, '%y-%m') as bookingmonth
from customer c
join booking b on c.customer_id = b.customer_id
group by c.customer_id, c.customer_name, bookingmonth;
 
12. Calculate the Average Ticket Price for Events in Each Venue Using a Subquery 
select v.venue_id, v.venue_name,
    (select avg(e.ticket_price)
     from event e
     where e.venue_id = v.venue_id) as avgticketprice
from venu v;
